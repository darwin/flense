@import url(http://fonts.googleapis.com/css?family=Source+Code+Pro);

/* generic styles applying to the entire page */

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  outline: none;
}

body {
  font-family: 'Source Code Pro';
  font-size: 14px;
  line-height: 1.4;
  margin-left: 5%;
  margin-top: 40px;
}

/* main editor view styles */

.editor {
  margin-bottom: 80px;
}
.editor > * {
  margin-bottom: 1rem;
  margin-left: 0;
}

.token, .stringlike textarea {
  border: none;
  font-family: inherit;
  font-size: inherit;
  resize: none;
}

.coll, .stringlike {
  display: flex;
  flex-flow: row wrap;
}

.coll:not(.seq) > :not(:first-child) {
  margin-left: 0.5rem;
}
.seq > :not(:last-child):not(:nth-last-child(2)),
.runoff-children > :not(:last-child) {
  margin-right: 0.5rem;
}

.runoff-children {
  margin-left: 1rem;
  margin-top: -1.2rem;
}
.runoff-children:before {
  content: " ";
  margin-right: 1000px;
}
.runoff-children:empty {
  display: none;
}

.fn:before     { content:  "#("; }
.fn:after      { content:   ")"; }
.map:before    { content:   "{"; }
.map:after     { content:   "}"; }
.regex:before  { content: "#\""; }
.regex:after   { content:  "\""; }
.seq:before    { content:   "("; }
.seq:after     { content:   ")"; }
.set:before    { content:  "#{"; }
.set:after     { content:   "}"; }
.string:before { content:  "\""; }
.string:after  { content:  "\""; }
.vec:before    { content:   "["; }
.vec:after     { content:   "]"; }

/* match invalid structures and display in red */

.fn .fn,
.fn .fn *,
.fn .fn:before,
.fn .fn:after {
  color: red;
}

.map > :nth-child(odd):last-child {
  color: red;
}

/* styles for stuff other than the main editor view */

#cli {
  border: none;
  border-top: 1px solid #ccc;
  bottom: 0;
  font-family: inherit;
  font-size: inherit;
  left: 0;
  padding: 1rem;
  position: fixed;
  width: 100%;
}

#error-bar {
  -webkit-backface-visibility: hidden;
  background: rgb(200,0,0);
  border-bottom-left-radius: 0.25rem;
  color: white;
  padding: 0.5rem;
  position: fixed;
  right: 0;
  top: 0;
}
#error-bar.visible {
  opacity: 1;
}
#error-bar.hidden {
  opacity: 0;
  transition: opacity 2s ease-out;
}
#error-bar:empty {
  visibility: hidden;
}
